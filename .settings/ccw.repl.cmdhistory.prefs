cmdhistory=["(defn factorial\\r\\n  \\"function factorial calculation\\"\\r\\n  (loop [multiplier x f 1]\\r\\n    (if (\= multiplier 1)\\r\\n      f\\r\\n      (recur (dec multiplier) (* f multiplier))\\r\\n      )\\r\\n    )\\r\\n  )" "(defn is-system-stabile\\r\\n  \\"function returns true if system is stable, else false\\"\\r\\n  (if (< utilization-cefficient 1)\\r\\n    (true)\\r\\n    (false)\\r\\n    ))" "(def aa \\"aa\\")" "(defn factorial-for-big-numbers [n]\\r\\n  (reduce * (range 1 (inc n))))" "(defn factorial\\r\\n  \\"function factorial calculation\\"\\r\\n  (loop [multiplier x f 1]\\r\\n    (if (\= multiplier 1)\\r\\n      f\\r\\n      (recur (dec multiplier) (* f multiplier))\\r\\n      )\\r\\n    )\\r\\n  )" "(defn divider\\r\\n  \\"function devides two numbers\\"\\r\\n  (float (/ x y))\\r\\n  (println \\"provided input is not valid - not number\\")\\r\\n  )" "(defn divider\\r\\n  \\"function devides two numbers\\"\\n  [x y]\\r\\n  (float (/ x y))\\r\\n  (println \\"provided input is not valid - not number\\")\\r\\n  )" "(defn factorial-for-big-numbers [n]\\r\\n  (reduce * (range 1 (inc n))))" "(factorial-for-big-numbers 100)" "(defn factorial\\r\\n  [x]\\r\\n  \\"function factorial calculation\\"\\r\\n  (loop [multiplier x f 1]\\r\\n    (if (\= multiplier 1)\\r\\n      f\\r\\n      (recur (dec multiplier) (* f multiplier))\\r\\n      )\\r\\n    )\\r\\n  )" "(factorial 100)" "(factorial 50)" "(factorial-for-big-numbers 50)" "(factorial-for-big-numbers 40)" "(factorial-for-big-numbers 30)" "(factorial-for-big-numbers 22)" "(factorial-for-big-numbers 20)" "(factorial-for-big-numbers 21)" "(factorial 21)" "(defn exclaim []\\r\\n      \\"This is Banking queues management application\!\\")\\r\\n\\r\\n(defn divider\\r\\n  [x y]\\r\\n  \\"function devides two numbers\\"\\r\\n  (float (/ x y))\\r\\n  (println \\"provided input is not valid - not number\\")\\r\\n  )\\r\\n\\r\\n(defn is-system-stabile\\r\\n  \\"function returns true if system is stable, else false\\"\\r\\n  [utilization-cefficient]\\r\\n  (if (< utilization-cefficient 1)\\r\\n    (true)\\r\\n    (false)\\r\\n    )\\r\\n  )\\r\\n\\r\\n(defn factorial\\r\\n  [x]\\r\\n  \\"function factorial calculation\\"\\r\\n  (loop [multiplier x f 1]\\r\\n    (if (\= multiplier 1)\\r\\n      f\\r\\n      (recur (dec multiplier) (* f multiplier))\\r\\n      )\\r\\n    )\\r\\n  )\\r\\n\\r\\n\\r\\n\\r\\n(defn factorial-for-big-numbers [n]\\r\\n  (reduce * (range 1 (inc n))))\\r\\n\\r\\n\\r\\n(defn -main [& args] (println (exclaim)))" "(divider 3 2)" "(divider 1 1)" "(defn divide\\n  [x y]\\n  (/ x y)\\n  )" "(divide 3 2)" "(float(divide 3 2))" " (defn divider\\r\\n     [x y]\\r\\n     \\"function devides two numbers\\"\\r\\n     (float (/ x y))\\r\\n     ;(println \\"provided input is not valid - not number\\")\\r\\n     )" "(divider 1 1)" " (defn divider\\r\\n     [x y]\\r\\n     \\"function devides two numbers\\"\\n     (if(number? x y)\\n       (float (/ x y))\\n       )\\r\\n     \\r\\n     ;(println \\"provided input is not valid - not number\\")\\r\\n     )" "(divider 1 1)" " (defn divider\\r\\n     [x y]\\r\\n     \\"function devides two numbers\\"\\n     (if (and (number? x) (number?))\\n       (float (/ x y))\\n       (println \\"provided input is not valid - not number\\")\\n       )\\r\\n     )" "(divider 1 1)" " (defn divider\\r\\n     [x y]\\r\\n     \\"function devides two numbers\\"\\n     (if (and (number? x) (number? y))\\n       (float (/ x y))\\n       (println \\"provided input is not valid - not number\\")\\n       )\\r\\n     )" "(divider 1 1)" "(divider 1 2)" "(divider 1 a)" "(divider 1 \\"a\\")" "(defn  avrg-client-wait-in-queue\\n  \\"Function returns average client wait in queue\\"\\n  ;arrival-rate - lambda, service-rate - mi\\n  [arrival-rate service-rate]\\n  (divider [(expt 2 arrival-rate) (*(- service-rate arrival-rate) arrival-rate)])\\n  )" "(defn exp-s [x n]\\r\\n  (let [square (fn[x] (* x x))]\\r\\n    (cond (zero? n) 1\\r\\n          (even? n) (square (exp-s x (/ n 2)))\\r\\n          \:else (* x (exp-s x (dec n))))))" "(defn  avrg-client-wait-in-queue\\n  \\"Function returns average client wait in queue\\"\\n  ;arrival-rate - lambda, service-rate - mi\\n  [arrival-rate service-rate]\\n  (divider [(exp-s arrival-rate 2) (*(- service-rate arrival-rate) arrival-rate)])\\n  )" "(avrg-client-wait-in-queue 0.25 0.33)" "(avrg-client-wait-in-queue 1 2)" "(defn  avrg-client-wait-in-queue\\n  \\"Function returns average client wait in queue\\"\\n  ;arrival-rate - lambda, service-rate - mi\\n  [arrival-rate service-rate]\\n  (divider (exp-s arrival-rate 2) (*(- service-rate arrival-rate) arrival-rate))\\n  )" "(avrg-client-wait-in-queue 1 2)" "(exp-s 2 2)" "(exp-s 2 3)" "(*(- 2 1) 1)" "(avrg-client-wait-in-queue 3 2)" "(*(- 2 3) 3)" "(avrg-client-wait-in-queue 1/4 1/3)" "(exp-s 2 1/4)" "(exp-s 2 0.25)" "(exp-s 2 2)" "(defn exp-s [x n]\\r\\n     (let [square (fn[x] (* x x))]\\r\\n       (cond (zero? n) 1\\r\\n             (even? n) (float (square (exp-s x (/ n 2))))\\r\\n             \:else (float (* x (exp-s x (dec n)))))))" "(exp-s 2 0.25)" "(even? 0.25)" "(even? 1/5)" "(defn exp [x n]\\r\\n  (reduce * (repeat n x)))" "(exp 0.25 2)" "(defn  avrg-client-wait-in-queue\\n  \\"Function returns average client wait in queue\\"\\n  ;arrival-rate - lambda, service-rate - mi\\n  [arrival-rate service-rate]\\n  (divider (exp arrival-rate 2) (*(- service-rate arrival-rate) arrival-rate))\\n  )" "(avrg-client-wait-in-queue 0.25 1/3)" "(exp 30 30)" "(exp 30 20)" "(exp 30 2)" "(exp 30 8)" "(def utilization-factor\\n  [lambda mi]\\n  (divider lambda mi)\\n  )" "(defn utilization-factor-calculator\\n  [lambda mi]\\n  (divider lambda mi)\\n  )" "(def util-factor)" "(def util-factor 0)" "(def util-factor (ref 0))" "(defn utilization-factor-calculator\\n  [lambda mi]\\n  (dosync (ref-set util-factor (divider lambda mi)))\\n  )" "(utilization-factor-calculator 0.25 1/3)" "(util-factor)" "(ref util-factor)" "(defn  avrg-client-wait-in-queue-2\\r\\n     \\"Function returns average client wait in queue\\"\\r\\n     [util-factor]\\r\\n     (divider (exp-s util-factor 2) (- 1 util-factor)))" "(avrg-client-wait-in-queue-2 (ref util-factor))" "@util-factor" "(avrg-client-wait-in-queue-2 (@util-factor))" "(avrg-client-wait-in-queue-2 (util-factor))" "(avrg-client-wait-in-queue-2 0.75)" "@util-factor" "(avrg-client-wait-in-queue-2 @util-factor)" "(def avrg-client-wait (ref 0))" " (defn  avrg-client-wait-in-queue-calculation33\\r\\n        \\"Function returns average client wait in queue\\"\\r\\n        [util-factor]\\r\\n        (dosync (ref-set avrg-client-wait (divider (exp util-factor 2) (- 1 util-factor)))))" "(clojure.core/ns org.daniloandjelic.queues.queues)\\n(defn avrg-client-in-system-calculation)\\n(clojure.core/ns user)" "(defn avrg-client-time-in-system-calculator\\r\\n  \\"function calculates average client time spent in system\\"\\r\\n  [lambda mi]\\r\\n  (dosync (ref-set avrg-client-time-in-system (divider 1 (- mi lambda)))))\\r\\n\\r\\n(defn calculation-aggregate-function\\r\\n  \\"abstract function that calculates value and ref-set it to a var\\"\\r\\n  [var p2 p3]\\r\\n  (dosync (ref-set p1 (divider p2 p3)))))" "(defn calculation-aggregate-function\\r\\n  \\"abstract function that calculates value and ref-set it to a var\\"\\r\\n  [var p2 p3]\\r\\n  (dosync (ref-set var (divider p2 p3)))))" "(defn calculation-aggregate-function\\r\\n  \\"abstract function that calculates value and ref-set it to a var\\"\\r\\n  [var p2 p3]\\r\\n  (dosync (ref-set var (divider p2 p3))))" "(defn avrg-client-time-in-system-calculator\\r\\n  \\"function calculates average client time spent in system\\"\\r\\n  [lambda mi]\\n  (calculation-aggregate-function avrg-client-time-in-system 1 (- mi lambda)))" "(def avrg-client-time-in-system)" "(def avrg-client-time-in-system (ref 0))" "(defn avrg-client-time-in-system-calculator\\r\\n  \\"function calculates average client time spent in system\\"\\r\\n  [lambda mi]\\n  (calculation-aggregate-function avrg-client-time-in-system 1 (- mi lambda)))" "(avrg-client-time-in-system-calculator 2 1)" "(avrg-client-time-in-system-calculator 1 2)" "@avrg-client-time-in-system"]
eclipse.preferences.version=1
